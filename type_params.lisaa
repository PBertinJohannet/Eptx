/// For the slices : have a function newslice<T : Any>() -> slice<T>
/// and have slice<T>::index() working as Point<T>.x
import string

trait Any2 = Any;

Class Point<T : Add> {
    T x = empty::<T>();
    T y = empty::<T>();
}

method toString() -> String of Point<num> {
    return self.x.toString()+", "+self.y.toString();
}

method add<T : Add>(Point<T> other) -> Point<T> of Point<T> {
    Point<T> p = other;
    slice<T> a = slice::<T>(2);
    a[0] = p.x;
    a[1] = p.y;

    p.x = self.x+other.x;
    p.y = self.y+other.y;
    return p;
}

fn add3<T : Add>(T a, T b, T c) -> T {
   return a.add(b) + c;
   //return a.add(1) + c;
}

fn nestedparams<T : Add, U : Add>(T a, T b, U c) {
    a = a +b;
    c = c + c;
}

fn callnestedparams<U : Add>(U a) -> U{
    nestedparams(1, 2, a);
    nestedparams(a, a, 5);
    return a;
}

trait Add = method add(Self) -> Self;
trait Mul = method mul(Self) -> Self;
trait Div = method div(Self) -> Self;
trait BasicAlgebra = Add + Mul + Div;

fn main(){
    Point<num> p = Point::<num>();
    p.x = 5;
    slice<num> mySlice = slice::<num>(5);
    mySlice[4] = 5;
    mySlice[3] = 51;
    mySlice[2] = 25;
    mySlice[1] = 1;
    mySlice[0] = 12;
    //print(p);
    p = callnestedparams(p);
    ("point is : "+p.toString()).println();
    for (num i = 0; i < 5; i=i+1;){
        mySlice[i].toString().println();
    }
}
